objects can be converted from one type to another 
  -bool() <-- returns false 
  -int()
  -float()
  -str()
use the type() function if doubt what type something is 
use id() to see if something has chnage in the value 

tuple and list can hold multiple items list is mutable
 accessing a list <list>[index value]
 modifying a list <list>[index] = <value>
 appending to a list<list>.append(<value>) adds at the end of the list
 deleting from a list del <list>[index]
 
 
 math operations:
  +  addition
  -  subtraction
  *  multiplication
  /  divsion
  // integer divsion
  %  modulus
  ** exponent
  
  a = 5
>>> a = a + 3
>>> b = 5
>>> b += 3
>>> print('a: {}  b: {}'.format(a, b))
a: 8  b: 8

  
  order of operation applies to python pendas 
  can use the abov mathematical operators in a wide variety
  
  
  
  
  use print and format
    print('a: {} b: {}'.format(a,b))
    
   str.split(sep=None, maxplit=-1)
   'user:passwd'.split(':')
['user', 'passwd']

   
   strings are immutable therfore trying to reassign to cause an error 
   s = 'hello'
>>> s[0]
'h'
>>> s[0] = 'j'
Traceback (most recent call last):

to overcome this one must turn the string into a list list(<str variable>)
  half to assign variable to this new list <------ apples = list(bana)
  then using index values can modify list 
  use join to join them back together 
 Examples


>>> ''.join(l)
'jello'
>>> '.'.join(l)
'j.e.l.l.o'
>>> '::'.join(l)  # The separator can be multiple characters
'j::e::l::l::o'
  
  
  if dealing with an email for an example one can use replace and split it all.
  <variable>.replace("<og item>", "<new item>')
  
  input() is how to get user input 
  
  
  boolean operators:
  
  ==  equal to
  !=  not equal to
  <   less then
  <=   less then or equal to
  >   greater then
  >=  greater than or equal
  in  value in collection
  is  object id match
  and logical
  or logical
  not logical
  
  for i in range(10, -1, -1):
  print(i)
uses step to count from 10 to zero
   
   
   ###slicing 
   sequence[start:stop:step]
   <sequence>[::-1] <-- reverses sequence 
   <sequence>[:-1] copy all execpt last
   
   
   read()
Reads all file data


read(size)
Read up to size bytes from the file


readline()
Reads a line from a file including newline '\n'


readlines()
Reads all lines in a file including newline '\n' into a list


readable()
Returns True if the file is readable

s = {1,2,3,4,5}
t = {4,5,6,7,8}
s.union(t)
{1, 2, 3, 4, 5, 6, 7, 8}
s.difference(t)
{1, 2, 3}
s.intersection(t)
{4, 5}


romanNumerals = {'I':1, 'V':5, 'X':10, 'L':50}
romanNumerals['X']

romanNumerals['C'] = 100
romanNumerals['D'] = 500
romanNumerals['M'] = 1000

romanNumerals['C']

del romanNumerals['C']
'C' in romanNumerals
'M' in romanNumerals

romanNumerals = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}

#Print all keys with values
for key in romanNumerals:
    print('{} = {}'.format(key, romanNumerals[key]))

#Easier method
for key, value in romanNumerals.items():
    print('{} = {}'.format(key, value))

def doSum(*args):
    type(args)
    sum = 0
    for addend in args:
        sum += addend
    print("Sum is {}".format(sum))
doSum(1,2,3,4)
Sum is 10


numlist = [13, 11, 1, 25, 78, 2, 6, 0]
sorted(numlist)
[0, 1, 2, 6, 11, 13, 25, 78]
sorted(numlist, reverse=True)
[78, 25, 13, 11, 6, 2, 1, 0]


    
    for i in nums:  <-----if p is present add it to list
        apples = i.split()
        
        for item in apples:
            if 'p' in item:
                p_words.append(item)
            else: 
                pass
    print(p_words)
    
    with open('travel_plans.txt') as fp: <---- assign the first 33 chr to variable
    first_chars = fp.read(33)
    
    with open('school_prompt.txt')as fp:
    three = []
    nums = []
    
    nums = fp.readlines() <----- assign third word to variable
    for i in nums:
        apples = i.split()
        three.append(apples[2])
        
        with open('emotion_words.txt') as fp: <--- total number of words
    num_words = 0
    nums = []
    nums = fp.readlines()
    for i in nums: 
        nums = i.split()
        num_words += len(nums)
        
        
        with open('travel_plans.txt') as fp: <----- num of chr
    num = 0
    nums = fp.readlines()
    for i in nums: 
        for item in i:
            num += 1 
            
            with open('school_prompt.txt') as fp: <-- num of line
    num_lines = 0
    nums = fp.readlines()
    for i in nums:
        num_lines += 1 
    

  
  
  
  
  ### Prac exam:
  ###q1.string of floats comma seperated retrun each float an elemnet in list new list
  def q1(floatstr):  <--- string of floats comma seperated retrun each float an elemnet in list new list
    newlist = []
    list = []
    list = floatstr.split(',')
    for i in list:
        a = float(i)
        newlist.append(a)
      
     return[float(x) for x in foatstr.split(',')]
     
     return list(map(float,floatstr.split(','))

   ###q2. retrun avg of all arguements as a float variable length arugements 
        s = 0
        for arg in args:
          s += arg
        return s/len(args)
        
        or
        
        def q1(*args):
    count = 0
    nums = 0
    for i in args:
        
        nums  = nums + i
        count += 1 
        print(nums)
    avg = nums / count 
    return avg
    pass
    
    ###q3. return a new list containing the last n entries in lst. LIST SLICING
        def q1(lst,n):
    newlist = []
    newlist = lst[-n:]
    return newlist
    
    #### q4. return list in ord() of each character of string in order found 
    
        def q1(strng):
    newlist = []
    
    for i in strng:
            newlist.append(ord(i))
            
               
    return newlist
    pass
        
        
        return [ord (x)for x in strng]
        
        
      #### q5. return tuple with each element in tuple containing a single word frm the input string in order
        return tuple(strng.split())
        
        def q1(strng):
    tuples = ()
    list = []
    new = strng.split()
    for i in new:
       list.append(i)
       tuples = tuple(list)
    return tuples 
    
    
    #####q6: dictionaries and unpacking tuples product prices and quantity
    
    

Given a dictionary (catalog) whose keys are product names and values are product prices per unit and a list of tuples (order) of product names and quantities, compute and return the total value of the order.

Example catalog:

{
'AMD Ryzen 5 5600X': 289.99,
'Intel Core i9-9900K': 363.50,
'AMD Ryzen 9 5900X': 569.99
}

Example order:

[
('AMD Ryzen 5 5600X', 5), 
('Intel Core i9-9900K', 3)
]

Example result:

2540.45

How the above result was computed:

(289.99 * 5) + (363.50 * 3)

def q6(catalog, order):
    pass


    def q6(catalog, order):
    value = 0
    for item in catalog.keys():
        for i, num in order:
            if item == i:
                value += catalog[item] * num
            elif item != i:
                continue 
            else:
                break
            
         OR:
         
         total = []
         for key in catalog:
            for item in order:
                if item[0] == key:
                  total.append(catalog[key] * item[1]
         return sum(total)
                  
    return value
    
    
    total = 0
    for product, quantiy in order:
        total == catalog[product] * quantity
     retrun total
     
     return sum(catalog[product]*quantity for product.quantity in order
    
    
    ####q7: given filename open file return length of first line in file excluding the line terminator
      ` with open(filename) as fp:
          x = fp.readlines()
          y = len(x) - 1
          return y
          
          def q1(filename):
 
    
    with open('filename') as fp:
        leng = 0
        file = []  
        file = fp.readlines()
        file = file[0]
        leng = len(file) - 1
        
        return leng

    pass
          
          with open(filename) as fp:
            return len(fp.readlines() - 1
          
      ####q8: given filename and list write each entry from to list to file on sepertae lines until stop is found in list
      
        with open(filename, 'w') as fp:
          for item in lst:
            if item.lower() == 'stop':
                break
            fp.write(f'{item}\n')
            
            
            
       ####q9. given militarytime return a string containing greeting of the day
          def q1(miltime):
    if miltime >= 300 and miltime <= 1159: <----- doesnt like leadinf zero and half to call variable twice return it not print it exactly as shown
        return('Good Morning')
    elif miltime >= 1200 and miltime <= 1559:
        return('Good Afternoon')
    elif miltime >= 1600 and miltime <= 2059:
        return('Good Evening')
    else:
        return('Good Night')
        
        
        if miltime >= 0b0301
        
        
        
        ### q10. return true if all negative are not negative if any are on the list return False
        
        def q1(numlist):
    for i in numlist:
        if i < 0:
            return False 
        if i > 0:
            return True
    pass
    
      for i in numlist:
        if i < 0:
          return False
         return True 
        
        
